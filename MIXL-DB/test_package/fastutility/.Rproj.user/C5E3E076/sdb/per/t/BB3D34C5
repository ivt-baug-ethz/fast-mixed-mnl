{
    "collab_server" : "",
    "contents" : "library(Rcpp)\nload(file = \"image_basil.RData\")\n\n\n#choice=(customdata1[,7]-1)\ndata.df = as.data.frame(data)\ndraws.m =as.matrix(draws)\n\nbeta <- c(-2.0673,\n          -0.2106,\n          1.7182,\n          -1.7273,\n          -0.7362,\n          -0.8585,\n          0.8137,\n          -0.6609,\n          -1.8909,\n          -1.807\n)\n\nparnames =c('ASC_A',\n            'ASC_U',\n\n            'B_NAH_VERK_A',\n            'B_NAH_VERK_U',\n\n            'B_FERN_VERK_A',\n            'B_FERN_VERK_U',\n\n            'B_BAU_VERK_A',\n            'B_BAU_VERK_U',\n\n            'S11',\n            'S22'\n\n)\n\nnames(beta) <- parnames\n\n\ncppFunction('\n\ndouble exfun(DataFrame data,\n            int Nindividuals,\n            NumericVector beta,\n            NumericMatrix draws,\n            int Ndraws)  {\n\n\n            //full length should be Nindividuals * Ndraws\n            //individuals should be labeled 1....N\n            //     int fulllength = Nindividuals * Ndraws; //*Ndraws;  //format = index (1...n); x1;x2;....; choice\n            //check off by one error for full length\n\n            //std::vector<double> utilities(4);\n            NumericVector utilities(3);\n            NumericMatrix P(Nindividuals, Ndraws);\n\n            NumericVector ids = data[\"ID\"];\n            NumericVector train_n = data[\"train_n\"];\n            NumericVector train_f = data[\"train_f\"];\n            NumericVector train_x = data[\"train_x\"];\n            NumericVector choice = data[\"CHOICE\"];\n\n            double asc_a = beta[\"ASC_A\"];\n            double asc_u = beta[\"ASC_U\"];\n\n            double b_nah_verk_a = beta[\"B_NAH_VERK_A\"];\n            double b_nah_verk_u = beta[\"B_NAH_VERK_U\"];\n\n            double b_fern_verk_a = beta[\"B_FERN_VERK_A\"];\n            double b_fern_verk_u = beta[\"B_FERN_VERK_U\"];\n\n            double b_bau_verk_a = beta[\"B_BAU_VERK_A\"];\n            double b_bau_verk_u = beta[\"B_BAU_VERK_U\"];\n\n            double s11 = beta[\"S11\"];\n            double s22 = beta[\"S22\"];\n\n\n\n            for (int i=0; i<data.nrows(); i++) {\n            int individual_index = ids[i]-1; //indexes should be for r, ie. start at 1\n\n            for (int draw=0; draw<Ndraws; draw++) {\n\n            int draw_index = individual_index * Ndraws + draw; //drawsrep give the index of the draw, based on id, which we dont want to carry in here.\n\n            utilities[0] =\n            asc_a + b_nah_verk_a * train_n[i] +\n            b_fern_verk_a * train_f[i] +\n            b_bau_verk_a * train_x[i] + s11 * draws(draw_index, 0);\n\n            utilities[1] =  0;\n\n            utilities[2] =\n            asc_u + b_nah_verk_u * train_n[i] +\n            b_fern_verk_u * train_f[i] +\n            b_bau_verk_u * train_x[i] + s22 * draws(draw_index, 1);\n\n            //   Rcpp::Rcout << i << \\\"\\t\\\" << utilities[0] << \\\"\\t\\\"  << utilities[1] << \\\"\\t\\\" << utilities[2] <<  std::endl;\n\n\n            /*\n            double maxim = max(utilities);\n            double minim = min(utilities);\n\n\n            double censor = (maxim + minim)/2;\n            for (int j = 0; j < utilities.size(); j++) {\n            utilities[j]=  exp(utilities[j]-censor);\n            }\n\n            */\n            for (int k=0; k < utilities.size(); k++) {\n            utilities[k] = std::min(700.0, std::max(-700.0, utilities[k]));\n            utilities[k] = exp(utilities[k]);\n            }\n\n            //      Rcpp::Rcout << i << \\\"\\t\\\" << utilities[0] << \\\"\\t\\\"  << utilities[1] << \\\"\\t\\\" << utilities[2] <<  std::endl;\n\n            double chosen_utility = utilities[choice[i]-1];\n            double sum_utilities = std::accumulate(utilities.begin(), utilities.end(), 0.0);\n            double p_choice = chosen_utility / sum_utilities;\n\n            if (false) {\n            Rcpp::Rcout << i << \"\\t\"\n            << individual_index << \"\\t\"\n            << draw << \"\\t\"\n            << draw_index << \"\\t\"\n            << utilities[0] << \"\\t\"\n            << utilities[1] << \"\\t\"\n            << utilities[2] << \"\\t\"\n            << chosen_utility << \"\\t\"\n            << sum_utilities << \"\\t\"\n            << p_choice << \"\\t\"\n            << log(p_choice)\n            <<  std::endl;\n            }\n\n\n            P(individual_index, draw) += log(p_choice); //sum up the draws as we go along.\n\n\n            }\n\n            }\n\n\n\n            double LL;\n\n            for (int i=0; i<Nindividuals; i++) {\n                double s = 0;\n                   for (int draw=0; draw<Ndraws; draw++) {\n                         s += exp(P(i,draw));\n                    }\n\n                LL  += log(s);\n\n            }\n\n            return LL - Nindividuals*log(Ndraws);\n\n            }\n\n\n    ')\n\n\n\n#herzstueck()\n\n\njoefunction <-function(){\n  return(exfun(data.df, N, beta, draws.m, Ndraws))\n}\n\na<-joefunction()\n\n",
    "created" : 1507032973177.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2017255690",
    "id" : "BB3D34C5",
    "lastKnownWriteTime" : 1506431600,
    "last_content_update" : 1506431600,
    "path" : "P:/_TEMP/Molloy/2_MIXL_TRAIN/TestingRcpp.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}