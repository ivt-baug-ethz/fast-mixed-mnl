{
    "collab_server" : "",
    "contents" : "#include <Rcpp.h>\nusing namespace Rcpp;\n\n\nNumericMatrix utilityFunction(DataFrame data,\n             int Nindividuals, //is the number of invidiuals being processed by this core\n             NumericVector beta,\n             NumericMatrix draws,\n             int Ndraws,\n             NumericMatrix P)  {\n\n  NumericVector utilities(3);  //specify here the number of alternatives\n\n  std::fill(P.begin(), P.end(), 0);\n\n  //delcare the variables that you will be using from the dataframe\n  NumericVector ids = data[\"ID\"];\n  NumericVector row_ids = data[\"row_id\"];\n  NumericVector train_n = data[\"train_n\"];\n  NumericVector train_f = data[\"train_f\"];\n  NumericVector train_x = data[\"train_x\"];\n  NumericVector choice = data[\"CHOICE\"];\n\n\n  //declare the coefficients from beta, it is faster this way.\n  double asc_a = beta[\"ASC_A\"];\n  double asc_u = beta[\"ASC_U\"];\n\n  double b_nah_verk_a = beta[\"B_NAH_VERK_A\"];\n  double b_nah_verk_u = beta[\"B_NAH_VERK_U\"];\n\n  double b_fern_verk_a = beta[\"B_FERN_VERK_A\"];\n  double b_fern_verk_u = beta[\"B_FERN_VERK_U\"];\n\n  double b_bau_verk_a = beta[\"B_BAU_VERK_A\"];\n  double b_bau_verk_u = beta[\"B_BAU_VERK_U\"];\n\n  double s11 = beta[\"S11\"];\n  double s22 = beta[\"S22\"];\n\n  for (int i=0; i<data.nrows(); ++i) {\n    int individual_index = row_ids[i]; //indexes should be for c, ie. start at 0\n\n    for (int draw=0; draw<Ndraws; ++draw) {\n      int draw_index = individual_index * Ndraws + draw; //drawsrep give the index of the draw, based on id, which we dont want to carry in here.\n\n      //////////edit utility functions here\n      utilities[0] =\n        asc_a + b_nah_verk_a * train_n[i] +\n        b_fern_verk_a * train_f[i] +\n        b_bau_verk_a * train_x[i] + s11 * draws(draw_index, 0);\n\n      utilities[1] =  0;\n\n      utilities[2] =\n        asc_u + b_nah_verk_u * train_n[i] +\n        b_fern_verk_u * train_f[i] +\n        b_bau_verk_u * train_x[i] + s22 * draws(draw_index, 1);\n\n      //uncomment this line if you wan to see output utilities\n      //   Rcpp::Rcout << \"id=\" << ids[i] << \",draw=\" << draw << \"\":[\" << utilities[0] << \",\"  << utilities[1] << \",\" << utilities[2] <<  \"]\" << std::endl;\n\n\n      //dont edit beflow this line\n      for (int k=0; k < utilities.size(); ++k) {\n        utilities[k] = std::min(700.0, std::max(-700.0, utilities[k])); //trip utilities to +- 700 for compuational reasons\n        utilities[k] = exp(utilities[k]); //take the exponential of each utility\n      }\n\n\n\n      double chosen_utility = utilities[choice[i]-1]; //this -1 is needed if the choices start at 1 (as they should)\n      double sum_utilities = std::accumulate(utilities.begin(), utilities.end(), 0.0);\n      double p_choice = chosen_utility / sum_utilities;\n\n      if (false) { //set to true for a full debug, false to turn off.\n        Rcpp::Rcout << i << \"\\t\"\n                    << individual_index << \"\\t\"\n                    << draw << \"\\t\"\n                    << draw_index << \"\\t\"\n                    << utilities[0] << \"\\t\"\n                    << utilities[1] << \"\\t\"\n                    << utilities[2] << \"\\t\"\n                    << chosen_utility << \"\\t\"\n                    << sum_utilities << \"\\t\"\n                    << p_choice << \"\\t\"\n                    << log(p_choice)\n                    <<  std::endl;\n      }\n\n\n      P(individual_index, draw) += log(p_choice); //sum up the draws as we go along.\n\n\n    }\n\n  }\n\n  return P;\n}\n\n//' @export loglikelihood\n//' '@useDynLib fastutility, .registration = TRUE'\n// [[Rcpp::export]]\ndouble loglikelihood(DataFrame data,\n              int Nindividuals,\n              NumericVector beta,\n              NumericMatrix draws,\n              int Ndraws, NumericMatrix P) {\n\n  utilityFunction(data, Nindividuals, beta, draws, Ndraws, P);\n\n  double LL = 0;\n\n  for (int i=0; i<Nindividuals; ++i) {\n    double s = 0;\n    for (int draw=0; draw<Ndraws; ++draw) {\n      s += exp(P(i,draw));\n    }\n\n    LL  += log(s);\n\n  }\n\n  return LL - Nindividuals*log(Ndraws);\n\n}\n\n//' @export individualLoglikelihood\n// [[Rcpp::export]]\nNumericVector individualLoglikelihood(DataFrame data,\n                     int Nindividuals,\n                     NumericVector beta,\n                     NumericMatrix draws,\n                     int Ndraws, NumericMatrix P) {\n\n  utilityFunction(data, Nindividuals, beta, draws, Ndraws, P);\n\n  NumericVector LL(Nindividuals);\n  double logNdraws = log(Ndraws);\n\n  for (int i=0; i<Nindividuals; ++i) {\n    double s = 0;\n    for (int draw=0; draw<Ndraws; ++draw) {\n      s += exp(P(i,draw));\n    }\n\n    LL[i] = log(s)-logNdraws;\n\n  }\n\n  return LL;\n\n}\n\n\n\n\n\n\n// You can include R code blocks in C++ files processed with sourceCpp\n// (useful for testing and development). The R code will be automatically\n// run after the compilation.\n//\n\n",
    "created" : 1506519469406.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2822169677",
    "id" : "94324EC2",
    "lastKnownWriteTime" : 1507037560,
    "last_content_update" : 1507037560,
    "path" : "P:/_TEMP/Molloy/2_MIXL_TRAIN/test_package/fastutility/src/cpp_utility.cpp",
    "project_path" : "src/cpp_utility.cpp",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}